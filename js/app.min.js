/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_modules_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/modules.js */ \"./src/js/modules/modules.js\");\n\r\n// flsFunctions.isWebp()\r\n// flsFunctions.navigation() // если есть бургер меню\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    let button = document.querySelector('.button')\r\n    button.onclick = _modules_modules_js__WEBPACK_IMPORTED_MODULE_0__.exporter\r\n});\r\n\n\n//# sourceURL=webpack://project/./src/js/app.js?");

/***/ }),

/***/ "./src/js/modules/modules.js":
/*!***********************************!*\
  !*** ./src/js/modules/modules.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"exporter\": () => (/* binding */ exporter)\n/* harmony export */ });\nclass Parallelogram {\r\n    constructor(inner) {\r\n        this.name = 'parallelogram'\r\n        this.inner = inner\r\n        this.right = 0\r\n    }\r\n}\r\n\r\nclass Start {\r\n    constructor() {\r\n        this.name = 'oval'\r\n        this.inner = 'Начало'\r\n        this.right = 0\r\n    }\r\n}\r\n\r\nclass End {\r\n    constructor() {\r\n        this.name = 'oval'\r\n        this.inner = 'Конец'\r\n        this.right = 0\r\n    }\r\n}\r\n\r\nclass Rectangle {\r\n    constructor(inner) {\r\n        this.name = 'Rectangle'\r\n        this.inner = inner\r\n        this.right = 0\r\n    }\r\n}\r\n\r\nclass Output {\r\n    constructor(inner) {\r\n        this.name = 'output'\r\n        this.inner = inner\r\n        this.right = 0\r\n    }\r\n}\r\n\r\nclass Rhombus {\r\n    constructor(inner, body) {\r\n        this.name = 'rhombus'\r\n        this.inner = inner\r\n        this.body = body\r\n        this.right = 0\r\n    }\r\n}\r\n\r\nclass Hexagon {\r\n    constructor(inner, body) {\r\n        this.name = 'hexagon'\r\n        this.inner = inner\r\n        this.body = body\r\n        this.right = 0\r\n    }\r\n}\r\n// пред и пост обработка\r\nfunction exporter() {\r\n    let input = document.querySelector('.input').value\r\n    input = input.slice(input.indexOf('begin') + 6)\r\n    input = input.split('\\n')\r\n    input.pop()\r\n    let blocks = recognizer(input)[0]\r\n    blocks = [new Start, ...blocks, new End]\r\n    compilator(blocks)\r\n};\r\n// распознаватель\r\nfunction recognizer(code) {\r\n    console.log(code)\r\n    let blocks = [];\r\n    let line;\r\n    let lineChanger = 0;\r\n    for (line = 0; line < code.length; line++) {\r\n        console.log(code[line])\r\n\r\n        // input------------------------------------------------------------------------------\r\n        if (code[line].toLowerCase().includes('readln') || code[line].toLowerCase().includes('read')) {\r\n            let startInner = '(';\r\n            let endInner = ')';\r\n            blocks[blocks.length] = new Parallelogram(\r\n                code[line].substring(code[line].indexOf(startInner) + startInner.length, code[line].indexOf(endInner))\r\n            );\r\n            continue;\r\n        }\r\n        // output-------------------------------------------------------------------------------\r\n        if (code[line].toLowerCase().includes('writeln') || code[line].toLowerCase().includes('write')) {\r\n            let startInner = '(';\r\n            let endInner = ')';\r\n            blocks[blocks.length] = new Output(\r\n                code[line].substring(code[line].indexOf(startInner) + startInner.length, code[line].indexOf(endInner))\r\n            );\r\n            continue;\r\n        }\r\n        // for------------------------------------------------------------------------------\r\n        if (code[line].toLowerCase().includes('for')) {\r\n            let startInner = 'for '\r\n            let endInner = ' do'\r\n            let body = []\r\n            console.log(code)\r\n            if (code[line + 1].toLowerCase().includes('begin')) {\r\n                for (let i = 2; !(code[line + i].toLowerCase().includes('end;') && code[line + i].split(' ').length == code[line + 1].split(' ').length); i++) {\r\n                    body.push(code[line + i])\r\n                }\r\n                [body, lineChanger] = recognizer(body)\r\n                blocks[blocks.length] = new Hexagon(\r\n                    code[line].substring(code[line].indexOf(startInner) + startInner.length, code[line].indexOf(endInner)),\r\n                    body\r\n                )\r\n                line += (lineChanger + 2)\r\n                continue;\r\n            } else {\r\n                let i = 1;\r\n                let numSpace = numOfSpace(code[line]);\r\n                while ((code[line + i] == undefined) ? false : (numSpace < numOfSpace(code[line + i]))) {\r\n                    body.push(code[line + i])\r\n                    i++\r\n                    // if (code[line + i] == undefined) {\r\n                    //     numSpace = 1000\r\n                    // }\r\n                }\r\n                [body, lineChanger] = recognizer(body)\r\n                blocks[blocks.length] = new Hexagon(\r\n                    code[line].substring(code[line].indexOf(startInner) + startInner.length, code[line].indexOf(endInner)),\r\n                    body\r\n                )\r\n                line += (lineChanger)\r\n                continue;\r\n                // console.log(body)\r\n\r\n            }\r\n\r\n        };\r\n        // if------------------------------------------------------------------------------------\r\n        if (code[line].toLowerCase().includes('if')) {\r\n            let startInner = 'if '\r\n            let endInner = ' then'\r\n            let body = []\r\n            if (code[line + 1].toLowerCase().includes('begin')) {\r\n                for (let i = 2; !(code[line + i].toLowerCase().includes('end;') && code[line + i].split(' ').length == code[line + 1].split(' ').length); i++) {\r\n                    body.push(code[line + i])\r\n                }\r\n                [body, lineChanger] = recognizer(body)\r\n                blocks[blocks.length] = new Rhombus(\r\n                    code[line].substring(code[line].indexOf(startInner) + startInner.length, code[line].indexOf(endInner)),\r\n                    body\r\n                )\r\n                line += (lineChanger + 2)\r\n                continue;\r\n            } else {\r\n                let i = 1;\r\n                let numSpace = numOfSpace(code[line]);\r\n                while ((code[line + i] == undefined) ? false : (numSpace < numOfSpace(code[line + i]))) {\r\n                    console.log(numSpace, numOfSpace(code[line + i]))\r\n                    body.push(code[line + i])\r\n                    i++\r\n                    // if (code[line + i] == undefined) {\r\n                    //     numSpace = 1000\r\n                    // }\r\n                }\r\n                [body, lineChanger] = recognizer(body)\r\n                blocks[blocks.length] = new Rhombus(\r\n                    code[line].substring(code[line].indexOf(startInner) + startInner.length, code[line].indexOf(endInner)),\r\n                    body\r\n                )\r\n                line += (lineChanger)\r\n                continue;\r\n            }\r\n\r\n        }\r\n        // прямоугольник-----------------------------------------------------------------------------------\r\n        blocks[blocks.length] = new Rectangle(\r\n            code[line]\r\n        )\r\n\r\n    };\r\n    return [blocks, code.length]\r\n};\r\n\r\nlet top = 0;\r\nlet gap = 10;\r\nlet width = 100;\r\nfunction compilator(blocks, id, parent) {\r\n    let left = -10\r\n    // let right = 0\r\n    let outputArea = document.querySelector('.outputArea__inner')\r\n    for (let item in blocks) {\r\n        //блоки\r\n        if (blocks[item].name == 'oval') {\r\n            outputArea.innerHTML = outputArea.innerHTML + `<div style='top:${top}px;width:${width}px;height:${width / 4}px' class='block ${blocks[item].name}'>${blocks[item].inner}</div>`\r\n            blocks[item].thisItem = outputArea.querySelector('.block:last-child')\r\n            top += width / 4\r\n        } else {\r\n            outputArea.innerHTML = outputArea.innerHTML + `<div style='top:${top}px;width:${width}px;height:${width / 2}px' class='block ${blocks[item].name}'>${blocks[item].inner}</div>`\r\n            blocks[item].thisItem = outputArea.querySelector('.block:last-child')\r\n            top += width / 2\r\n        }\r\n        //ровные линии\r\n        if (!(id == 'hexagon' && blocks[+item + 1] === undefined && blocks[item].body == undefined)) {\r\n            if (blocks[item].inner != 'Конец') {\r\n                outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${(width - 1) / 2}px;top:${top}px;height:${gap}px;width:1px;background:#000'></div>`\r\n                top += gap\r\n            }\r\n            //кривые линии\r\n        } else {\r\n            left = lineBuilder(blocks[item], 'bottom', parent, 'left', outputArea, left)[0]\r\n            top += gap\r\n        }\r\n        //рекурсия\r\n        if (blocks[item].hasOwnProperty('body')) {\r\n            let left1, right1;\r\n            if (blocks[item].name == 'hexagon') {\r\n                left1 = compilator(blocks[item].body, 'hexagon', blocks[item])\r\n                if (left1 < left) { left = left1 }\r\n            } else {\r\n                left1 = compilator(blocks[item].body, id, parent)\r\n                if (left1 < left) { left = left1 }\r\n            }\r\n        }\r\n        if (blocks[item].name == 'hexagon' && blocks[+item + 1] != undefined) {\r\n            let right = blocks[item].right + lineBuilder(blocks[item], 'right', blocks[+item + 1], 'top', outputArea, left, blocks[item].right)[1]\r\n            if (parent != undefined) parent.right = right;\r\n        }\r\n        if (blocks[item].name == 'hexagon' && blocks[+item + 1] == undefined) {\r\n            let right = blocks[item].right + lineBuilder(blocks[item], 'right', parent, 'left', outputArea, left, blocks[item].right)[1]\r\n            parent.right = right;\r\n        }\r\n    }\r\n    outputArea.style.height = `${top}px`\r\n    document.querySelector('.main').style.height = `${top + 230}px`\r\n    return left\r\n};\r\nfunction lineBuilder(blockFrom, from, blockTo, to, outputArea, left, right) {\r\n    if (from == 'bottom' && to == 'left') {\r\n        let topCorrect = blockFrom.thisItem.style.top.split('px')[0] - blockTo.thisItem.style.top.split('px')[0]\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${(width - 1) / 2}px;top:${top}px;height:${gap}px;width:1px;background:#000'></div>`\r\n        top += 10\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${left}px;top:${top}px;height:1px;width:${width / 2 - left + 0.5}px;background:#000'></div>`\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${left}px;top:${top - topCorrect - gap - width / 4}px;height:${topCorrect + gap + width / 4}px;width:1px;background:#000'></div>`\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${left}px;top:${top - topCorrect - gap - width / 4}px;height:1px;width:${-left + 1}px;background:#000'></div>`\r\n        left -= 10\r\n    }\r\n    if (from == 'right' && to == 'top') {\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${width - 1}px;top:${+blockFrom.thisItem.style.top.split('px')[0] + width / 4 - 0.5}px;height:1px;width:${+blockFrom.right + gap + 1}px;background:#000'></div>`\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${width + blockFrom.right + gap - 1}px;top:${+blockFrom.thisItem.style.top.split('px')[0] + width / 4}px;height:${top - (+blockFrom.thisItem.style.top.split('px')[0] + width / 4) + 1}px;width:1px;background:#000'></div>`\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${width / 2 - 0.5}px;top:${top}px;height:1px;width:${width / 2 + +blockFrom.right + 10}px;background:#000'></div>`\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${(width - 1) / 2}px;top:${top}px;height:${gap}px;width:1px;background:#000'></div>`\r\n        top += gap\r\n        blockFrom.right = right + 10\r\n    }\r\n    if (from == 'right' && to == 'left') {\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${width - 1}px;top:${+blockFrom.thisItem.style.top.split('px')[0] + width / 4 - 0.5}px;height:1px;width:${+blockFrom.right + gap + 1}px;background:#000'></div>`\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${width + blockFrom.right + gap - 1}px;top:${+blockFrom.thisItem.style.top.split('px')[0] + width / 4}px;height:${top - (+blockFrom.thisItem.style.top.split('px')[0] + width / 4)}px;width:1px;background:#000'></div>`\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${left}px;top:${top}px;height:1px;width:${width - left + right + gap}px;background:#000'></div>`\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${left}px;top:${+blockTo.thisItem.style.top.split('px')[0] + width / 4}px;height:${top - (+blockTo.thisItem.style.top.split('px')[0] + width / 4)}px;width:1px;background:#000'></div>`\r\n        outputArea.innerHTML = outputArea.innerHTML + `<div style='position:absolute;left:${left}px;top:${+blockTo.thisItem.style.top.split('px')[0] + width / 4 - 0.5}px;height:1px;width:${+blockFrom.right - left + 1}px;background:#000'></div>`\r\n        left -= 10\r\n        top += gap\r\n        blockFrom.right = right + 10\r\n    }\r\n    return [left, blockFrom.right]\r\n}\r\nfunction numOfSpace(str) {\r\n    str = str.split('')\r\n    let num = 0;\r\n    for (let item of str) {\r\n        if (item == ' ') {\r\n            num++\r\n        } else {\r\n            return num\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://project/./src/js/modules/modules.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/app.js");
/******/ 	
/******/ })()
;